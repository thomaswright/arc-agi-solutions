// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Common from "../Common.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

var taskName = "4290ef0e";

var data = {
  train: [
    {
      input: [
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          3,
          3,
          3,
          4,
          4
        ],
        [
          4,
          4,
          4,
          1,
          1,
          4,
          1,
          1,
          4,
          4,
          4,
          4,
          3,
          4,
          3,
          4,
          4
        ],
        [
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          4,
          3,
          3,
          3,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          1,
          1,
          4,
          1,
          1,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          6,
          6,
          4,
          4,
          4,
          6,
          6
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          6,
          4,
          4,
          4,
          4,
          4,
          6
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          6,
          4,
          4,
          4,
          4,
          4,
          6
        ]
      ],
      output: [
        [
          6,
          6,
          4,
          4,
          4,
          6,
          6
        ],
        [
          6,
          1,
          1,
          4,
          1,
          1,
          6
        ],
        [
          4,
          1,
          3,
          3,
          3,
          1,
          4
        ],
        [
          4,
          4,
          3,
          4,
          3,
          4,
          4
        ],
        [
          4,
          1,
          3,
          3,
          3,
          1,
          4
        ],
        [
          6,
          1,
          1,
          4,
          1,
          1,
          6
        ],
        [
          6,
          6,
          4,
          4,
          4,
          6,
          6
        ]
      ]
    },
    {
      input: [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          1,
          1,
          8,
          1,
          1,
          1,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          0,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          1,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          1,
          1,
          1,
          8,
          1,
          1,
          1,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          4,
          4,
          4,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          4,
          8,
          4,
          8,
          8,
          8,
          2,
          2,
          8,
          2,
          2,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          4,
          4,
          4,
          8,
          8,
          8,
          2,
          8,
          8,
          8,
          2,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          2,
          8,
          8,
          8,
          2,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          2,
          2,
          8,
          2,
          2,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ]
      ],
      output: [
        [
          1,
          1,
          1,
          8,
          1,
          1,
          1
        ],
        [
          1,
          2,
          2,
          8,
          2,
          2,
          1
        ],
        [
          1,
          2,
          4,
          4,
          4,
          2,
          1
        ],
        [
          8,
          8,
          4,
          0,
          4,
          8,
          8
        ],
        [
          1,
          2,
          4,
          4,
          4,
          2,
          1
        ],
        [
          1,
          2,
          2,
          8,
          2,
          2,
          1
        ],
        [
          1,
          1,
          1,
          8,
          1,
          1,
          1
        ]
      ]
    },
    {
      input: [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          2,
          2,
          2,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          2,
          3,
          3,
          1,
          1,
          1,
          3,
          3,
          3,
          1,
          1,
          1,
          3,
          8,
          8,
          3
        ],
        [
          3,
          3,
          2,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          8,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          2,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          8,
          3,
          3
        ],
        [
          3,
          3,
          2,
          3,
          3,
          3,
          3,
          7,
          7,
          7,
          3,
          3,
          3,
          3,
          3,
          8,
          8,
          3
        ],
        [
          2,
          2,
          2,
          3,
          3,
          3,
          3,
          7,
          3,
          7,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          7,
          7,
          7,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          1,
          1,
          1,
          3,
          3,
          3,
          1,
          1,
          1,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          4,
          4,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          4,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          4,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          6,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ],
      output: [
        [
          4,
          4,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          4
        ],
        [
          4,
          1,
          1,
          1,
          3,
          3,
          3,
          1,
          1,
          1,
          4
        ],
        [
          3,
          1,
          2,
          2,
          2,
          3,
          2,
          2,
          2,
          1,
          3
        ],
        [
          3,
          1,
          2,
          8,
          8,
          3,
          8,
          8,
          2,
          1,
          3
        ],
        [
          3,
          3,
          2,
          8,
          7,
          7,
          7,
          8,
          2,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          7,
          6,
          7,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          2,
          8,
          7,
          7,
          7,
          8,
          2,
          3,
          3
        ],
        [
          3,
          1,
          2,
          8,
          8,
          3,
          8,
          8,
          2,
          1,
          3
        ],
        [
          3,
          1,
          2,
          2,
          2,
          3,
          2,
          2,
          2,
          1,
          3
        ],
        [
          4,
          1,
          1,
          1,
          3,
          3,
          3,
          1,
          1,
          1,
          4
        ],
        [
          4,
          4,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          4
        ]
      ]
    }
  ],
  test: [{
      input: [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          4,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          4,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          8,
          8,
          8,
          1,
          1,
          1,
          4,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          8,
          1,
          8,
          1,
          1,
          1,
          4,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          8,
          8,
          8,
          1,
          1,
          1,
          4,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          4,
          4,
          4,
          4,
          4,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          3,
          3,
          1,
          3,
          3,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          3,
          1,
          1,
          1,
          3,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          3,
          1,
          1,
          1,
          3,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          3,
          3,
          1,
          3,
          3,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          6,
          6,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          6,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          1,
          1,
          1,
          2,
          2,
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          6,
          1,
          1,
          1,
          1
        ]
      ],
      output: [
        [
          4,
          4,
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          2,
          2,
          2,
          1,
          1,
          1,
          2,
          2,
          2,
          4
        ],
        [
          4,
          2,
          6,
          6,
          1,
          1,
          1,
          6,
          6,
          2,
          4
        ],
        [
          4,
          2,
          6,
          3,
          3,
          1,
          3,
          3,
          6,
          2,
          4
        ],
        [
          4,
          1,
          1,
          3,
          8,
          8,
          8,
          3,
          1,
          1,
          4
        ],
        [
          1,
          1,
          1,
          1,
          8,
          1,
          8,
          1,
          1,
          1,
          1
        ],
        [
          4,
          1,
          1,
          3,
          8,
          8,
          8,
          3,
          1,
          1,
          4
        ],
        [
          4,
          2,
          6,
          3,
          3,
          1,
          3,
          3,
          6,
          2,
          4
        ],
        [
          4,
          2,
          6,
          6,
          1,
          1,
          1,
          6,
          6,
          2,
          4
        ],
        [
          4,
          2,
          2,
          2,
          1,
          1,
          1,
          2,
          2,
          2,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          1,
          4,
          4,
          4,
          4,
          4
        ]
      ]
    }]
};

var tests = Common.allTests(data);

function main(input) {
  var colorGroups = Common.allColors.map(function (color) {
          return Common.getCoordsOfColors(input, [color]);
        }).filter(function (coords) {
        return coords.length !== 0;
      });
  var match = Belt_Array.partition(colorGroups, (function (v) {
          return v.length === 1;
        }));
  var singleCoord = match[0];
  var sortedBoxes = match[1].toSorted(function (a, b) {
        return b.length - a.length | 0;
      });
  var withCorners = sortedBoxes.slice(1);
  var bgColor = sortedBoxes[0][0].color;
  var getSizeAndArm = function (corners, c, param) {
    var yStep = param[1];
    var xStep = param[0];
    var armX = Common.stepsToNext(input, bgColor, [
          c.x,
          c.y
        ], [
          xStep,
          0
        ]);
    var medianX = Common.stepsToNext(input, c.color, [
          c.x + armX | 0,
          c.y
        ], [
          xStep,
          0
        ]);
    var armY = Common.stepsToNext(input, bgColor, [
          c.x,
          c.y
        ], [
          0,
          yStep
        ]);
    var medianY = Common.stepsToNext(input, c.color, [
          c.x,
          c.y + armY | 0
        ], [
          0,
          yStep
        ]);
    if (corners.length <= 1) {
      if ((armX + medianX | 0) > (armY + medianY | 0)) {
        return [
                (armY << 1) + medianY | 0,
                armY
              ];
      } else {
        return [
                (armX << 1) + medianX | 0,
                armX
              ];
      }
    }
    var size = Core__Array.reduce(corners, 0, (function (acc, corner) {
            var corner_ = Common.unwrapCorner(corner);
            return Common.intMax(Common.intMax(Common.dist(corner_.x, c.x), Common.dist(corner_.y, c.y)), acc);
          }));
    return [
            size,
            Common.intMax(armX, armY)
          ];
  };
  var measures = Belt_Array.keepMap(withCorners.map(function (coords) {
              var corners = Common.getCorners(coords);
              var color = coords[0].color;
              return Core__Option.map(Core__Array.reduce(corners.map(function (v) {
                                  switch (v.TAG) {
                                    case "TL" :
                                        return getSizeAndArm(corners, v._0, [
                                                    1,
                                                    1
                                                  ]);
                                    case "TR" :
                                        return getSizeAndArm(corners, v._0, [
                                                    -1,
                                                    1
                                                  ]);
                                    case "BL" :
                                        return getSizeAndArm(corners, v._0, [
                                                    1,
                                                    -1
                                                  ]);
                                    case "BR" :
                                        return getSizeAndArm(corners, v._0, [
                                                    -1,
                                                    -1
                                                  ]);
                                    
                                  }
                                }), undefined, (function (acc, param) {
                                var arm = param[1];
                                var size = param[0];
                                if (acc === undefined) {
                                  return [
                                          size,
                                          arm
                                        ];
                                }
                                var s = acc[0];
                                return size > s ? [
                                          size,
                                          arm
                                        ] : [
                                          s,
                                          acc[1]
                                        ];
                              })), (function (v) {
                            return [
                                    color,
                                    v
                                  ];
                          }));
            }), (function (x) {
            return x;
          })).toSorted(function (param, param$1) {
        return param$1[1][0] - param[1][0] | 0;
      });
  var blankSize = (function (param) {
        return param[1][0];
      })(measures[0]);
  var adjustment = blankSize % 2;
  var singleAdjustment = function (a) {
    return Core__Option.mapOr(Core__Option.flatMap(singleCoord[0], (function (v) {
                      return v[0];
                    })), a, (function (param) {
                  var color = param.color;
                  return Common.adjustRel(a, (function (param) {
                                return color;
                              }), [
                              (blankSize - adjustment | 0) / 2 | 0,
                              (blankSize - adjustment | 0) / 2 | 0
                            ], [
                              0,
                              0
                            ]);
                }));
  };
  return Core__Array.reduce(measures, singleAdjustment(Common.blank(bgColor, blankSize - adjustment | 0, blankSize - adjustment | 0)), (function (acc, param) {
                var match = param[1];
                var arm = match[1];
                var size = match[0];
                var color = param[0];
                var i = size - size % 2 | 0;
                var os = (blankSize - size | 0) / 2 | 0;
                return Common.adjustRel(Common.adjustRel(Common.adjustRel(Common.adjustRel(Common.adjustRel(Common.adjustRel(Common.adjustRel(Common.adjustRel(acc, (function (param) {
                                                          return color;
                                                        }), [
                                                        os,
                                                        os
                                                      ], [
                                                        arm,
                                                        0
                                                      ]), (function (param) {
                                                      return color;
                                                    }), [
                                                    os,
                                                    os
                                                  ], [
                                                    0,
                                                    arm
                                                  ]), (function (param) {
                                                  return color;
                                                }), [
                                                os + i | 0,
                                                os
                                              ], [
                                                -arm | 0,
                                                0
                                              ]), (function (param) {
                                              return color;
                                            }), [
                                            os + i | 0,
                                            os
                                          ], [
                                            0,
                                            arm
                                          ]), (function (param) {
                                          return color;
                                        }), [
                                        os,
                                        os + i | 0
                                      ], [
                                        arm,
                                        0
                                      ]), (function (param) {
                                      return color;
                                    }), [
                                    os,
                                    os + i | 0
                                  ], [
                                    0,
                                    -arm | 0
                                  ]), (function (param) {
                                  return color;
                                }), [
                                os + i | 0,
                                os + i | 0
                              ], [
                                -arm | 0,
                                0
                              ]), (function (param) {
                              return color;
                            }), [
                            os + i | 0,
                            os + i | 0
                          ], [
                            0,
                            -arm | 0
                          ]);
              }));
}

var solutionExport = {
  taskName: taskName,
  tests: tests,
  main: main
};

export {
  taskName ,
  data ,
  tests ,
  main ,
  solutionExport ,
}
/* tests Not a pure module */
