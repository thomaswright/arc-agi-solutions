// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Common from "../Common.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import Cdd2623Json from "../data/training/6cdd2623.json";

var taskName = "6cdd2623";

var data = Cdd2623Json;

function main(input) {
  var hasOnlyFour = Belt_MapString.toArray(Common.colorCount(Belt_Array.concatMany(input))).filter(function (param) {
        return param[1] === 4;
      });
  var color = hasOnlyFour.find(function (param) {
        return Common.getCoordsOfColors(input, [Common.stringToColor(param[0])]).every(function (c) {
                    return Common.isOnEdge([
                                c.x,
                                c.y
                              ], input);
                  });
      });
  var match = Common.maxes(input);
  var maxY = match[1];
  var maxX = match[0];
  return Core__Option.flatMap(color, (function (param) {
                var colorCoords = Common.getCoordsOfColors(input, [Common.stringToColor(param[0])]);
                if (Common.reduceSatAll(colorCoords, [
                        (function (c) {
                            return c.x === 0;
                          }),
                        (function (c) {
                            return c.x === 0;
                          }),
                        (function (c) {
                            return c.x === maxX;
                          }),
                        (function (c) {
                            return c.x === maxX;
                          })
                      ])) {
                  var lefts = colorCoords.filter(function (c) {
                        return c.x === 0;
                      });
                  var rights = colorCoords.filter(function (c) {
                        return c.x === maxX;
                      });
                  var left0 = lefts[0];
                  var left1 = lefts[1];
                  var right0 = rights.find(function (r) {
                        return r.y === left0.y;
                      });
                  var right1 = rights.find(function (r) {
                        return r.y === left1.y;
                      });
                  if (right0 !== undefined && right1 !== undefined) {
                    return Common.adjustCol(Common.adjustCol(Common.blank("Black", maxX, maxY), right0.y, (function (param) {
                                      return right0.color;
                                    })), right1.y, (function (param) {
                                  return right1.color;
                                }));
                  } else {
                    return ;
                  }
                }
                if (Common.reduceSatAll(colorCoords, [
                        (function (c) {
                            return c.y === 0;
                          }),
                        (function (c) {
                            return c.y === 0;
                          }),
                        (function (c) {
                            return c.y === maxY;
                          }),
                        (function (c) {
                            return c.y === maxY;
                          })
                      ])) {
                  var tops = colorCoords.filter(function (c) {
                        return c.y === 0;
                      });
                  var bottoms = colorCoords.filter(function (c) {
                        return c.y === maxY;
                      });
                  var top0 = tops[0];
                  var top1 = tops[1];
                  var bottom0 = bottoms.find(function (b) {
                        return b.x === top0.x;
                      });
                  var bottom1 = bottoms.find(function (b) {
                        return b.x === top1.x;
                      });
                  if (bottom0 !== undefined && bottom1 !== undefined) {
                    return Common.adjustRow(Common.adjustRow(Common.blank("Black", maxX, maxY), bottom0.x, (function (param) {
                                      return bottom0.color;
                                    })), bottom1.x, (function (param) {
                                  return bottom1.color;
                                }));
                  } else {
                    return ;
                  }
                }
                if (!Common.reduceSatAll(colorCoords, [
                        (function (c) {
                            return c.x === 0;
                          }),
                        (function (c) {
                            return c.x === maxX;
                          }),
                        (function (c) {
                            return c.y === 0;
                          }),
                        (function (c) {
                            return c.y === maxY;
                          })
                      ])) {
                  return ;
                }
                var left = colorCoords.find(function (c) {
                      return c.x === 0;
                    });
                var top = colorCoords.find(function (c) {
                      return c.y === 0;
                    });
                if (left === undefined) {
                  return ;
                }
                if (top === undefined) {
                  return ;
                }
                var right = colorCoords.find(function (c) {
                      if (c.y === left.y) {
                        return c.x === maxX;
                      } else {
                        return false;
                      }
                    });
                var bottom = colorCoords.find(function (c) {
                      if (c.x === top.x) {
                        return c.y === maxY;
                      } else {
                        return false;
                      }
                    });
                if (right !== undefined && bottom !== undefined) {
                  return Common.adjustRow(Common.adjustCol(Common.blank("Black", maxX, maxY), left.y, (function (param) {
                                    return left.color;
                                  })), top.x, (function (param) {
                                return top.color;
                              }));
                }
                
              }));
}

var solutionExport = {
  taskName: taskName,
  data: data,
  main: main
};

export {
  taskName ,
  data ,
  main ,
  solutionExport ,
}
/* data Not a pure module */
