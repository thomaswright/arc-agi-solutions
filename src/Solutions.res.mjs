// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function keepMapWithIndex(arr, f) {
  return Belt_Array.keepMap(arr.map(function (x, i) {
                  return [
                          x,
                          i
                        ];
                }), (function (param) {
                return f(param[0], param[1]);
              }));
}

function transpose(arr) {
  return Core__Array.reduceWithIndex(arr, [], (function (acc, cur, i) {
                if (i === 0) {
                  return cur.map(function (x) {
                              return [x];
                            });
                } else {
                  return acc.map(function (x) {
                              return Belt_Array.concatMany([
                                          x,
                                          [cur[i]]
                                        ]);
                            });
                }
              }));
}

function findLinesOfColor(full, color) {
  return keepMapWithIndex(full, (function (row, i) {
                if (row.every(function (c) {
                        return Caml_obj.equal(c, color);
                      })) {
                  return i;
                }
                
              }));
}

function range(max) {
  return Core__Array.make(max, 0).map(function (param, i) {
              return i;
            });
}

function converses(selects, max) {
  return range(max).filter(function (i) {
              return !selects.includes(i);
            });
}

function getLastEl(arr) {
  return arr[arr.length - 1 | 0];
}

function appendToLastEl(arr, x) {
  var lastIndex = arr.length - 1 | 0;
  return arr.map(function (e, i) {
              if (i === lastIndex) {
                return Belt_Array.concatMany([
                            e,
                            [x]
                          ]);
              } else {
                return e;
              }
            });
}

function groups(rows) {
  return Core__Array.reduce(rows, [], (function (acc, cur) {
                return Core__Option.mapOr(getLastEl(acc), [[cur]], (function (lastGroup) {
                              return Core__Option.mapOr(getLastEl(lastGroup), [[cur]], (function (lastEl) {
                                            if (lastEl === (cur - 1 | 0)) {
                                              return appendToLastEl(acc, cur);
                                            } else {
                                              return Belt_Array.concatMany([
                                                          acc,
                                                          [[cur]]
                                                        ]);
                                            }
                                          }));
                            }));
              }));
}

function dimensions(full) {
  return [
          full.length,
          transpose(full).length
        ];
}

function allPairs(x, y) {
  return Belt_Array.concatMany(x.map(function (xv) {
                  return y.map(function (yv) {
                              return [
                                      xv,
                                      yv
                                    ];
                            });
                }));
}

function subSet(set, rows, cols) {
  return keepMapWithIndex(set, (function (x, i) {
                if (rows.includes(i)) {
                  return keepMapWithIndex(x, (function (y, j) {
                                if (cols.includes(j)) {
                                  return Caml_option.some(y);
                                }
                                
                              }));
                }
                
              }));
}

function getBlockSpecs(rows, cols) {
  var rowGroups = groups(rows);
  var colGroups = groups(cols);
  return allPairs(rowGroups, colGroups);
}

function carve(full, blockSpecs) {
  return blockSpecs.map(function (param) {
              return subSet(full, param[0], param[1]);
            });
}

function main() {
  var full = [[]];
  var blackRows = findLinesOfColor(full, "Black");
  var blackColumns = findLinesOfColor(transpose(full), "Black");
  var match = dimensions(full);
  var blockSpecs = getBlockSpecs(converses(blackRows, match[0]), converses(blackColumns, match[1]));
  carve(full, blockSpecs);
}

var Main_0b148d64 = {
  main: main
};

export {
  keepMapWithIndex ,
  transpose ,
  findLinesOfColor ,
  range ,
  converses ,
  getLastEl ,
  appendToLastEl ,
  groups ,
  dimensions ,
  allPairs ,
  subSet ,
  getBlockSpecs ,
  carve ,
  Main_0b148d64 ,
}
/* No side effect */
