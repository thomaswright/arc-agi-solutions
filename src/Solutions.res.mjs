// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Solution_0b148d64 from "./solutions/Solution_0b148d64.res.mjs";
import * as Solution_4290ef0e from "./solutions/Solution_4290ef0e.res.mjs";
import * as Solution_6cdd2623 from "./solutions/Solution_6cdd2623.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Solutions$Grid(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: props.block.map(function (row) {
                          return JsxRuntime.jsx("div", {
                                      children: row.map(function (el) {
                                            return JsxRuntime.jsx("div", {
                                                        className: "w-2 h-2",
                                                        style: {
                                                          backgroundColor: Common.colorToHex(el)
                                                        }
                                                      });
                                          }),
                                      className: "flex flex-row gap-px"
                                    });
                        }),
                    className: "flex flex-col gap-px bg-gray-600 w-fit "
                  }),
              className: "p-2 "
            });
}

var Grid = {
  make: Solutions$Grid
};

function Solutions$SolutionComp(props) {
  var main = props.main;
  return JsxRuntime.jsx("div", {
              children: props.tests.map(function (test) {
                    return JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("div", {
                                                children: "Input",
                                                className: "px-2 font-medium text-lg"
                                              }),
                                          JsxRuntime.jsx(Solutions$Grid, {
                                                block: test.input
                                              })
                                        ]
                                      }),
                                  Core__Option.mapOr(main(test.input), null, (function (output_) {
                                          return JsxRuntime.jsxs("div", {
                                                      children: [
                                                        JsxRuntime.jsx("div", {
                                                              children: "Expected",
                                                              className: "px-2 font-medium text-lg"
                                                            }),
                                                        JsxRuntime.jsx(Solutions$Grid, {
                                                              block: test.output
                                                            }),
                                                        JsxRuntime.jsxs("div", {
                                                              children: [
                                                                "Output",
                                                                JsxRuntime.jsx("span", {
                                                                      children: Common.compareBlocks(output_, test.output) ? "Solved!" : "Unsolved",
                                                                      className: "p-2 font-black text-lg "
                                                                    })
                                                              ],
                                                              className: "px-2 font-medium text-lg"
                                                            }),
                                                        JsxRuntime.jsx(Solutions$Grid, {
                                                              block: output_
                                                            })
                                                      ]
                                                    });
                                        }))
                                ],
                                className: "flex flex-row py-2"
                              });
                  }),
              className: "flex flex-col divide-y-2 divide-black"
            });
}

var SolutionComp = {
  make: Solutions$SolutionComp
};

function Solutions(props) {
  var match = React.useState(function () {
        return "0b148d64";
      });
  var setSelected = match[1];
  var selected = match[0];
  var solutions = [
    Solution_0b148d64.solutionExport,
    Solution_6cdd2623.solutionExport,
    Solution_4290ef0e.solutionExport
  ];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: "ARC-AGI",
                      className: "text-3xl font-black pb-4"
                    }),
                JsxRuntime.jsx("div", {
                      children: solutions.map(function (param) {
                            var taskName = param.taskName;
                            var isSelected = Core__Option.mapOr(selected, false, (function (s) {
                                    return s === taskName;
                                  }));
                            return JsxRuntime.jsx("button", {
                                        children: taskName,
                                        className: [
                                            "px-2 rounded",
                                            isSelected ? "bg-blue-600 text-white" : "bg-blue-200"
                                          ].join(" "),
                                        onClick: (function (param) {
                                            setSelected(function (param) {
                                                  return taskName;
                                                });
                                          })
                                      });
                          }),
                      className: "flex flex-row gap-2"
                    }),
                Core__Option.mapOr(Core__Option.flatMap(selected, (function (v) {
                            return solutions.find(function (s) {
                                        return s.taskName === v;
                                      });
                          })), null, (function (param) {
                        return JsxRuntime.jsx(Solutions$SolutionComp, {
                                    tests: param.tests,
                                    main: param.main
                                  });
                      }))
              ]
            });
}

var make = Solutions;

export {
  Grid ,
  SolutionComp ,
  make ,
}
/* react Not a pure module */
